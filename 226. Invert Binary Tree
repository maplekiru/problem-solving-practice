Given the root of a binary tree, invert the tree, and return its root.

Approach:

- For each parent node swap its left and right children and traverse through tree and repeat
-  make swap at the beg
- base case: if that parent node has null children for both left and right
 progress left and right (order doesn't matter)


/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */

var invertTree = function(root) {
    
    if (root.left !== null || root.right !== null) {
        let temp = root.left;
        root.left = root.right;
        root.right = temp;
    }

    if (root.left) invertTree (root.left);
    if (root.right) invertTree (root.right);


    return root;
};