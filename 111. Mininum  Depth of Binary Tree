Approach:

 - Recursive, pass the count down and when null return back up the stack
 - Iterative: Use BFS and return level when node has node has no children


/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */

var minDepth = function(root) {
    if (root === null) return 0;

    let queue = [[root, 1]];

    while (queue.length > 0) {
        const current = queue.shift();
        const node = current[0]
        const depth = current[1]

        if (node.left === null && node.right === null) return depth;

        if (node.left) queue.push([node.left, depth +1]);
        if (node.right) queue.push([node.right, depth +1]);
    }
};