Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32

Approach:
Brute Force - check every node and add to sum if within range (DFS or BFS)

Better Approach - if current node is less than low then all nodes to the left will not be in range and we can stop
 - same for high value

    - Check the condition once we traverse to that node, not before
    - Recursive DFS approach, pass sum down tree

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} low
 * @param {number} high
 * @return {number}
 */

var rangeSumBST = function(root, low, high, sum = 0) {
    if (root.val >= low && root.val <= high) sum += root.val;

    if (root.val > low && root.left) {
        sum = rangeSumBST(root.left, low, high, sum)
    }

    if (root.val < high && root.right) {
        sum = rangeSumBST(root.right, low, high, sum)
    }

    return sum;
};