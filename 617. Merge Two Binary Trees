Approach:
    - First take 2 nodes passed in and create new node with merged values
        - if one is null then only take the valid node val
    - progress: moved left and right in sync if 1 node is not null
    - base case: if both have null node next while traversing
            - edge case if both null, return null;
    - return the current node back up, so the last stack will return the root of the merged Tree

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root1
 * @param {TreeNode} root2
 * @return {TreeNode}
 */

var mergeTrees = function(root1, root2) {
if (root1 === null & root2 === null) return null;

const val = (root1?.val || 0) + ( root2?.val || 0);

let node = new TreeNode(val);

if (root1?.left || root2?.left) {
    node.left = mergeTrees(root1?.left, root2?.left);
}

if (root1?.right || root2?.right) {
    node.right = mergeTrees(root1?.right, root2?.right);
}

return node;
    
};