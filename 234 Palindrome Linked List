Given the head of a singly linked list, return true if it is a palindrome.

TESTCASES: 

[1,2,2,1] -> True
[1,2,3,2,1] -> True
[1,2] -> False

Approaches:
- Recursively:
    -- compare i to n - i in call stack;

- Multiple Pointers:
    - Slow pointer creates a stack of 1st 1/2
    - Fast pointer finds length of list (current = null, current.next = null) by 2;
    - Fast pointer just helps slow find the mid pointer
    - Pop off the stack and keep slow pointer going through list and compare values

-- Edge case handling odd vs. even amount of nodes

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {boolean}
 */

var isPalindrome = function(head) {
    if (head === null) return null;
    
    let slowPointer = head;
    let fastPointer = head;

    let stack = [];

    while (fastPointer !== null || fastPointer?.next !== null) {
        stack.push(slowPointer);
        slowPointer = slowPointer.next;
        fastPointer = fastPointer.next?.next;
    }

    if (fastPointer && fastPointer.next !== null) slowPointer = slowPointer.next;

    while (slowPointer !== null) {
        let node = stack.pop();

        if (node.val !== slowPointer.val) return false;
        slowPointer = slowPointer.next;
    }

    return true;

};