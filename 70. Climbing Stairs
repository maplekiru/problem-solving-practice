You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Input: n = 4
Output: 5
1. 1 step + 1 step + 1 step + 1 step
2. 1 step + 1 step + 2 step
3. 1 step + 2 steps + 1 step
4. 2 step + 1 steps + 1 step
5. 2 step + 2 step

 

Constraints:

1 <= n <= 45

approaches:
1. Iterate using loops to count #
2. Recursive approach

PSEUDOCODE:

base case is when n = 0 we return +1
progress: subtracting 1 or when calling function recursively

function climbStairs(n, count = 0) {
    if (n === 0) return 1;

    if (n >= 2) {
        count += climbStairs(n-2);
    }

    if (n >= 1) {
        count += climbStairs(n-1);
    }

    return count;
}